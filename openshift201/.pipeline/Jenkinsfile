#!/usr/bin/env groovy

//ENV Vars
def NAMESPACE_PREFIX = "4zq6uj-cvarjao-ocp201-tst" 
def TOOLS_NAMESPACE = "${NAMESPACE_PREFIX}-tools"
def DEV_NAMESPACE = "${NAMESPACE_PREFIX}-dev"
def PROD_NAMESPACE = "${NAMESPACE_PREFIX}-prod"


//Pipeline
node {
  stage ('Deploy - DEV'){
    parallel (
      'loki': {
        dir('loki'){
          checkout scm
          sh "oc process -f templates/loki.yaml -p  NAME=cvarjao-loki | oc apply -f - -n ${DEV_NAMESPACE} --dry-run=true --validate=true"
          sh "oc process -f templates/loki.yaml -p  NAME=cvarjao-loki | oc apply -f - -n ${DEV_NAMESPACE}"
          sh "oc -n ${DEV_NAMESPACE} rollout status statefulset/cvarjao-loki"
        }
      },
      'prometheus': {
        dir('prometheus'){
          checkout scm
          sh "oc process -f templates/prometheus.yaml -p  NAME=cvarjao-prometheus -p NAMESPACE=${DEV_NAMESPACE} -p ROUTE_HOST=cvarjao-prometheus-${DEV_NAMESPACE}  | oc apply -f - -n ${DEV_NAMESPACE} --dry-run=true --validate=true"
          sh "oc process -f templates/prometheus.yaml -p  NAME=cvarjao-prometheus -p NAMESPACE=${DEV_NAMESPACE} -p ROUTE_HOST=cvarjao-prometheus-${DEV_NAMESPACE}  | oc apply -f - -n ${DEV_NAMESPACE}"
          sh "oc -n ${DEV_NAMESPACE} rollout status Deployment/cvarjao-prometheus"
        }
      },
      'grafana': {
        dir('grafana'){
          checkout scm
          sh "oc process -f templates/grafana.yaml -p  GRAFANA_SERVICE_NAME=cvarjao-grafana -p ROUTE_HOST=cvarjao-grafana-${DEV_NAMESPACE} -p LOKI_SERVICE_NAME=cvarjao-loki -p PROMETHEUS_SERVICE_NAME=cvarjao-prometheus | oc apply -f - -n ${DEV_NAMESPACE} --dry-run=true --validate=true"
          sh "oc process -f templates/grafana.yaml -p  GRAFANA_SERVICE_NAME=cvarjao-grafana -p ROUTE_HOST=cvarjao-grafana-${DEV_NAMESPACE} -p LOKI_SERVICE_NAME=cvarjao-loki -p PROMETHEUS_SERVICE_NAME=cvarjao-prometheus | oc apply -f - -n ${DEV_NAMESPACE}"
          sh "oc -n ${DEV_NAMESPACE} rollout status DeploymentConfig/cvarjao-grafana"
        }
      }
    )

    /*
    openshift.withCluster() {
      openshift.withProject(DEV_NAMESPACE) {
          def dc = openshift.selector('statefulset', "cvarjao-loki")
          // this will wait until the desired replicas are available
          dc.rollout().status()
      }
    }
    */
  } // end build stage
} //end node
